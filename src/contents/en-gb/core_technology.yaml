anchor: "#"
pageIntro:
  title: Core Technology
  para1:
    chunk1: The SAFE Network core libraries are written exclusively in Rust and the content below provides a brief explanation of their hierarchy. The code is all open source and for more information please refer to our
    link:
      name: licensing
      href: /licensing
    chunk2: page.
components:
  title: Project Hierarchy
  app_layer:
    dapp:
      anchor: "dapp"
      name: "Desktop, mobile, CLI apps"
      href: '/start_developing'
    wapp:
      anchor: "wapp"
      name: "Web Apps"
      href: '/start_developing'
    bindings:
      anchor: "bindings"
      name: "Language bindings (Javascript, Java, C#)"
      github: 'https://github.com/maidsafe/safe_bindgen'
    browser:
      anchor: "browser"
      name: "SAFE Browser & Authenticator plugin"
      github: 'https://github.com/maidsafe/safe_browser/'
  quic_p2p:
    anchor: "quic-p2p"
    name: quic-p2p
    github: 'https://github.com/maidsafe/quic-p2p'
    doc:
      href: 'https://docs.rs/quic-p2p/'
      img: 'https://docs.rs/quic-p2p/badge.svg'
    crate:
      href: 'https://crates.io/crates/quic-p2p'
      img: 'http://meritbadge.herokuapp.com/quic-p2p'
    para1: "This library provides a mechanism for peers on P2P networks to communicate securely."
  routing:
    anchor: "routing"
    name: Routing
    github: 'https://github.com/maidsafe/routing'
    doc:
      href: 'https://docs.rs/routing/'
      img: 'https://docs.rs/routing/badge.svg'
    crate:
      href: 'https://crates.io/crates/routing'
      img: 'http://meritbadge.herokuapp.com/routing'
    para1: Routing sits on top of quic-p2p. It is our overlay networking and routing layer and forms the brain of the SAFE Network. Its purpose is forming a decentralised Internet and the routing information within it.
    para2:
      chunk1: Routing is based on an algorithm that extends the
      link1:
        name: Kademlia
        href: https://en.wikipedia.org/wiki/Kademlia
      chunk2: DHT routing. It uses 32-byte XOR addresses to locate data on the network. It is guaranteed that messages can be routed from any part of the network to any other end - as is proven by the Kademlia paper. Routing works purely on the terms of group consensus. We don’t trust a single entity, only a group decision with
      link2:
        name: eventual consistency
        href: https://en.wikipedia.org/wiki/Eventual_consistency
      chunk3: ". In order to come to this eventual consistency the routing layer uses the consensus mechanism PARSEC."
    parsec:
      anchor: "parsec"
      name: PARSEC
      para1: PARSEC is a Protocol for Asynchronous, Reliable, Secure and Efficient Consensus and is the world's first open source ABFT (Asynchronous Byzantine Fault Tolerance) protocol that can be used in a truly permissionless setting.
      github: 'https://github.com/maidsafe/parsec'
      doc:
        href: 'https://docs.rs/parsec'
        img: 'https://docs.rs/parsec/badge.svg'
      crate:
        href: 'https://crates.io/crates/parsec'
        img: 'http://meritbadge.herokuapp.com/parsec'
  vault:
    anchor: "vaults"
    name: Vaults
    github: 'https://github.com/maidsafe/safe_vault'
    doc:
      href: 'https://docs.rs/safe_vault/'
      img: 'https://docs.rs/safe_vault/badge.svg'
    crate:
      href: 'https://crates.io/crates/safe_vault'
      img: 'http://meritbadge.herokuapp.com/safe_vault'
    para1: This is one of the executable consumers of Routing and will primarily hold SAFE Network Data.
    para2: "Vaults support multiple data types: Mutable Data and Immutable Data are currently available to developers. The major difference between these two types is the ability to change the data. Both have their own set of properties."
    para5: "Personas in Vaults handle the different aspects of the network. Data Managers store the data, Client Managers store the users accounts balance, which is currently measured in allowed mutations, and eventually will be changed to Safecoin. Client Managers also store lists of users’ apps and implement the access control rules. There is no requirement to have a registered account to retrieve data and users are always free to send direct read requests to Data Managers."
  c_libs:
    anchor: "c_libs"
    name: SAFE Client Libs
    github: 'https://github.com/maidsafe/safe_client_libs'
    para1:
      chunk1: "The SAFE Client Libraries are a set of libraries providing a way for developers to consume and use the SAFE Network facilities. The libraries communicate with Vaults and build upon the foundation of fundamental network components, such as quic-p2p and Routing, to provide higher-level network abstractions like files and directories. The main Client Libs components are:"
    comp:
      name: Components
      safe_core:
        anchor: "safecore"
        name: SAFE Core
        para1:
          chunk1: "SAFE Core is the foundation that provides various helpful abstractions like NFS on top of the basic network building blocks. It is also the common backend for the Authenticator and SAFE App, forming the client engine."
        github: 'https://github.com/maidsafe/safe_client_libs/tree/master/safe_core'
        doc:
          href: 'https://docs.rs/safe_core'
          img: 'https://docs.rs/safe_core/badge.svg'
        crate:
          href: 'https://crates.io/crates/safe_core'
          img: 'http://meritbadge.herokuapp.com/safe_core'
      safe_auth:
        anchor: "safeauthenticator"
        name: SAFE Authenticator Component
        para1:
          chunk1: "The Authenticator is the component that provides Self Authenticated login and account creation and handles the register of all users' apps. It is integrated with the SAFE Browser and apps can request the access to the network through it. If users don't want to use a certain app anymore, they can revoke the access."
        github: 'https://github.com/maidsafe/safe_client_libs/tree/master/safe_authenticator'
        doc:
          href: 'https://docs.rs/safe_authenticator'
          img: 'https://docs.rs/safe_authenticator/badge.svg'
        crate:
          href: 'https://crates.io/crates/safe_authenticator'
          img: 'http://meritbadge.herokuapp.com/safe_authenticator'
      safe_app:
        anchor: "safeapp"
        name: SAFE App
        para1:
          chunk1: "SAFE App is the component that provides access to SAFE Network for front-end Apps in a user friendly way via "
          link1:
            name: "FFI"
            href: 'https://en.wikipedia.org/wiki/Foreign_function_interface'
          chunk2: "."
        github: 'https://github.com/maidsafe/safe_client_libs/tree/master/safe_app'
        doc:
          href: 'https://docs.rs/safe_app'
          img: 'https://docs.rs/safe_app/badge.svg'
        crate:
          href: 'https://crates.io/crates/safe_app'
          img: 'http://meritbadge.herokuapp.com/safe_app'
    auxs:
      anchor: "auxlib"
      name: Auxiliary libraries
      ffi:
        name: FFI_Utils
        para1:
          chunk1: Provides helpers to work with foreign function interfaces more easily. Also contains many helpful testing tools that depend on our FFI calling conventions.
        github: 'https://github.com/maidsafe/ffi_utils'
        doc:
          href: 'https://docs.rs/ffi_utils'
          img: 'https://docs.rs/ffi_utils/badge.svg'
        crate:
          href: 'https://crates.io/crates/ffi_utils'
          img: 'http://meritbadge.herokuapp.com/ffi_utils'
      bindgen:
        anchor: "bindgen"
        name: SAFE Bindgen
        para1:
          chunk1: Automatically generates language bindings for C, Java, and C# based on the user API.
        github: 'https://github.com/maidsafe/safe_bindgen'
        doc:
          href: 'https://docs.rs/safe_bindgen'
          img: 'https://docs.rs/safe_bindgen/badge.svg'
        crate:
          href: 'https://crates.io/crates/safe_bindgen'
          img: 'http://meritbadge.herokuapp.com/safe_bindgen'
util:
  anchor: "utils"
  title: Utilities and Helper Libraries
  comp1:
    anchor: "selfencrypt"
    name: Self-Encryption
    github: 'https://github.com/maidsafe/self_encryption'
    doc:
      href: 'https://docs.rs/self_encryption/'
      img: 'https://docs.rs/self_encryption/badge.svg'
    crate:
      href: 'https://crates.io/crates/self_encryption'
      img: 'http://meritbadge.herokuapp.com/self_encryption'
    para1: MaidSAFE patented scheme for generating entropy to obfuscate and encrypt data from the data itself.
    para2:
      chunk1: Self-Encryption is based on the
      link1:
        name: convergent encryption
        href: https://en.wikipedia.org/wiki/Convergent_encryption
      chunk2: "algorithm. It produces the same encrypted output for the same plaintext input. This property allows us to deduplicate files at the network level. Files are split up into multiple chunks, stored on the network at the same predictable location, based on the encrypted chunks’ hashes. The result of the encryption process is a data map that holds keys to the encrypted data chunks and is stored securely on the network. This crate is usable even outside of the SAFE Network context as the I/O implementation is abstract."
  comp2:
    anchor: "rustsodium"
    name: Rust-Sodium
    github: 'https://github.com/maidsafe/rust_sodium'
    doc:
      href: 'https://docs.rs/rust_sodium/'
      img: 'https://docs.rs/rust_sodium/badge.svg'
    crate:
      href: 'https://crates.io/crates/rust_sodium'
      img: 'http://meritbadge.herokuapp.com/rust_sodium'
    para1: Libsodium bindings, forked from the sodiumoxide project, provides extra features and improves the security.

rfcs:
  anchor: "rfcs"
  title: "RFCs - Request For Comments"
  summary: "The RFC (Request For Comments) process is intended to provide a consistent and controlled path for new features to enter the network and core libraries, so that all stakeholders can be confident about the direction in which the network is evolving."
  learn:
    name: "Learn More"
    href: 'https://github.com/maidsafe/rfcs/blob/master/README.md'
  active:
    name: "RFC Status Page"
    href: 'https://github.com/maidsafe/rfcs/blob/master/RFCs-by-status.md#active-rfcs'
patents:
  anchor: "patents"
  title: Relevant Patents
  patent1:
    anchor: "patent1"
    name: Method for storing data on a peer-to-peer network
    href: '/patent1'
  patent2:
    anchor: "patent2"
    name: Method for storing data on a peer-to-peer network
    href: '/patent2'
  patent3:
    anchor: "patent3"
    name: Method for storing data on a peer-to-peer network
    href: '/patent3'
